/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  hello?: string;
  owner?: GQLPerson;
  allPersons: Array<GQLPerson>;
}

export interface GQLPerson {
  name: string;
  age: number;
}

export interface GQLMutation {
  createPerson: GQLPerson;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Person?: GQLPersonTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  hello?: QueryToHelloResolver<TParent>;
  owner?: QueryToOwnerResolver<TParent>;
  allPersons?: QueryToAllPersonsResolver<TParent>;
}

export interface QueryToHelloResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAllPersonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonTypeResolver<TParent = any> {
  name?: PersonToNameResolver<TParent>;
  age?: PersonToAgeResolver<TParent>;
}

export interface PersonToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createPerson?: MutationToCreatePersonResolver<TParent>;
}

export interface MutationToCreatePersonArgs {
  name: string;
  age: number;
}
export interface MutationToCreatePersonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePersonArgs, context: any, info: GraphQLResolveInfo): TResult;
}
